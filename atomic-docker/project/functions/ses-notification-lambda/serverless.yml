service: ses-notification-lambda-service

frameworkVersion: '3'

provider:
  name: aws
  # runtime: nodejs18.x # Removed: Runtime is defined by the Docker image
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment: # Global environment variables, also available to the Docker container
    NODE_OPTIONS: --enable-source-maps
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    HASURA_GRAPHQL_ENDPOINT_URL: ${env:HASURA_GRAPHQL_ENDPOINT_URL, "http://host.docker.internal:8080/v1/graphql"}
    HASURA_ADMIN_SECRET_ARN: ${env:HASURA_ADMIN_SECRET_ARN}
    SES_SENDER_EMAIL: ${env:SES_SENDER_EMAIL}
    # LOG_LEVEL: ${env:LOG_LEVEL, "INFO"}

  iam: # Global IAM role statements
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${sls:stage}-*:*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*" # Scope down in production
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: ${env:HASURA_ADMIN_SECRET_ARN}
        # Permissions needed by Serverless Framework to manage ECR if it creates the repo
        # These are for the *deploying IAM user/role*, not the Lambda execution role.
        # However, sometimes people add ecr:GetAuthorizationToken to Lambda if it dynamically pulls images,
        # but for this push-based model, it's mainly deploy-time permissions for the deployer.
        # If Serverless Framework creates the ECR repo, the deployer needs:
        # - ecr:CreateRepository
        # - ecr:DescribeRepositories
        # The Lambda execution role itself does not need ECR permissions to *run* from an image.

  ecr: # ECR configuration for Docker image deployments
    images:
      sesnotificationlambdaimage: # Logical name for this image configuration
        path: ./ # Path to the directory containing Dockerfile (root of this service)
        # file: Dockerfile # Optional: if Dockerfile is named differently
        # platform: linux/amd64 # Optional: specify platform if needed for cross-compilation builds

custom:
  esbuild: # serverless-esbuild will still build the JS code that goes INTO the Docker image
    bundle: true
    minify: true
    sourcemap: true # Recommended for dev, can be 'external' or false for prod to reduce package size
    sourcesContent: false # Do not include source content in sourcemaps for production
    platform: 'node'
    target: 'node18'
    packager: 'npm' # or 'yarn'
    # If using path aliases from tsconfig.json like "@utils/*":
    # tsconfig: 'tsconfig.json' # Ensure serverless-esbuild reads tsconfig for paths, may need plugin for resolution
    # watch: # For 'sls offline' hot-reloading
    #   pattern:
    #     - src/**/*.ts
    #     - ../_utils/**/*.ts # Watch shared utilities too
    #   ignore: ['node_modules/**', '.serverless/**', '.esbuild/**']

plugins:
  - serverless-esbuild
  - serverless-offline
  # - serverless-iam-roles-per-function

functions:
  sesNotificationHandler:
    # handler: src/index.handler # Not needed when 'image' is specified
                                 # The handler is specified by CMD in Dockerfile or Lambda config
    name: ${self:service}-${sls:stage}-ses-notifier
    description: Sends scheduling result notifications via SES (Docker image), triggered by Hasura.
    # memorySize: 256
    # timeout: 15
    image:
      name: sesnotificationlambdaimage # Refers to the logical image name in provider.ecr.images
      # command: [ "src/index.handler" ] # Optional: Override CMD in Dockerfile. Format depends on base image.
                                        # For AWS base images, this is often how you specify your handler.
      # entryPoint: [ "/usr/bin/custom-entrypoint.sh" ] # Optional
      # workingDirectory: "/var/task" # Optional

    events:
      - httpApi:
          path: /hasura/event/ses-notification
          method: post
          # Example of securing HTTP API with a Lambda Authorizer (JWT or custom)
          # authorizer:
          #   name: myLambdaAuthorizer # Name of another Lambda function defined in this serverless.yml or its ARN
          #   type: request # Or 'jwt' if using Cognito User Pools or other JWT issuer
          #   enableSimpleResponses: true # For request authorizer
          #   identitySource: $request.header.Authorization # Where to find the token
          #
          # For simple API Key auth with HTTP API, it's often managed via Usage Plans + API Keys
          # outside the direct httpApi event config, or by a custom authorizer checking a key.
          # If using REST API (v1) for more direct API Key support:
          # - http:
          #     path: /hasura/event/ses-notification
          #     method: post
          #     private: true # This makes the endpoint require an API Key

# (Optional) Define other AWS resources like API Keys for REST APIs if needed
# resources:
#   Resources:
#     MyApiKey:
#       Type: AWS::ApiGateway::ApiKey
#       Properties:
#         Name: hasura-event-trigger-key
#         Enabled: true
#     MyUsagePlan:
#       Type: AWS::ApiGateway::UsagePlan
#       Properties:
#         ApiStages:
#           - ApiId: !Ref ApiGatewayRestApi # Default API Gateway created by Serverless for 'http' events
#             Stage: ${sls:stage}
#         UsagePlanName: hasura-triggers-usage-plan
#     MyUsagePlanKey:
#       Type: AWS::ApiGateway::UsagePlanKey
#       Properties:
#         KeyId: !Ref MyApiKey
#         KeyType: API_KEY
#         UsagePlanId: !Ref MyUsagePlan

# Outputs: # (Optional) CloudFormation outputs
#   SesNotificationApiEndpoint:
#     Description: "API Gateway endpoint URL for the SES Notification Lambda"
#     Value:
#       Fn::Join:
#         - ""
#         - - "https://"
#           - !GetAtt HttpApi.ApiId # !GetAtt works for HTTP API, for REST API it's !Ref ApiGatewayRestApi
#           - ".execute-api.${self:provider.region}.amazonaws.com"
#           # Stage is not part of HttpApi endpoint URL by default unless base path mapping is used
#           # For REST API: - "/${self:provider.stage}"
#           - "/hasura/event/ses-notification" # Path needs to be appended
```

**Key updates in this version:**
*   Used `${sls:stage}` for consistency in function naming and potentially resource naming.
*   Clarified IAM resource ARN for CloudWatch Logs: `arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:*`.
*   Noted that `serverless-esbuild` might need `tsconfig: 'tsconfig.json'` in its `custom.esbuild` config if path aliases are used and need to be resolved from `tsconfig.json`.
*   Provided more detailed examples for securing the `httpApi` endpoint (Lambda authorizer) and contrasted with `http` (REST API) for API Key usage.
*   Commented out the `resources` section for API Keys/Usage Plans as `httpApi` (v2) handles API keys differently (usually via API Gateway console or further IaC for usage plans associated with HTTP APIs). If REST API (`http`) with `private: true` is used, that section becomes more relevant.
*   Adjusted the `Outputs` section to be more robust for `httpApi` endpoint URL construction (though this can be tricky and often `sls info` is used to get the final URL).

This `serverless.yml` provides a good starting point for the SES Lambda. Similar files would be created for Slack and Teams Lambdas, adjusting names, handlers, specific IAM permissions (e.g., different Secrets Manager ARNs for Slack/Teams tokens), and any environment variables unique to them.
